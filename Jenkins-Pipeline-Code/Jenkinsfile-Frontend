pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO1')
        AWS_DEFAULT_REGION = 'us-west-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/frontend"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/EswarSandeep/3-Tire_AWS.git'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=three-tier-frontend \
                        -Dsonar.projectKey=three-tier-frontend '''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                    sh "trivy fs --format table -o trivy-fs-report.html ."
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/frontend') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t my-imagef .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
             steps {
              script {
                withCredentials([
               [$class: 'AmazonWebServicesCredentialsBinding',accessKeyVariable: 'AWS_ACCESS_KEY_ID',credentialsId: 'aws_key',secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {    
                 sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
            
               // Tag Docker image with Jenkins build ID
                def imageTag = env.BUILD_ID
                sh "docker tag my-imagef:latest ${REPOSITORY_URI}:${imageTag}"
            
               // Push Docker image with Jenkins build ID as tag
                sh "docker push ${REPOSITORY_URI}:${imageTag}"
                }
               }
              }
        }
        stage("Trivy Image Scan") {
             steps {
               // Run Trivy image scan
                script {
                 def trivyScan = sh(script: "trivy image ${REPOSITORY_URI}:${BUILD_NUMBER}", returnStatus: true)
            
                // Check the exit status of the Trivy scan
                  if (trivyScan == 0) {
                      echo "Trivy scan completed successfully. No vulnerabilities found."
                  } else {
                      error "Trivy scan failed. Please check for vulnerabilities."
                  }
              }  
             }
        }        
        stage('Checkout Code') {
            steps {
               git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/EswarSandeep/3-Tire_AWS.git'
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "3-Tire_AWS"
                GIT_USER_NAME = "EswarSandeep"
            }
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "eswarsandeep.donkina@gmail.com"
                            git config user.name "EswarSandeep"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            echo $imageTag
                            sed -i "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }            
    }
}
